from flask import Flask, request, jsonify
import pickle
import pandas as pd
from sklearn.preprocessing import StandardScaler

app = Flask(__name__)

# Load the trained model and scaler
model = pickle.load(open('churn_model.pkl', 'rb'))
scaler = pickle.load(open('scaler.pkl', 'rb'))

def preprocess_data(data):
    """
    Preprocesses input data for prediction.

    Args:
        data (dict): Dictionary containing customer features.

    Returns:
        pandas.DataFrame: Preprocessed DataFrame.
    """
    df = pd.DataFrame(data, index=[0])

    # Handle missing values (example: replace with mean)
    df.fillna(df.mean(), inplace=True)

    # Select relevant features (replace with actual feature names)
    features = ['tenure', 'age', 'monthly_charges', 'total_charges']
    X = df[features]

    # Scale the features
    X_scaled = scaler.transform(X)

    return X_scaled

@app.route('/predict', methods=['POST'])
def predict_churn():
    """
    Predicts customer churn probability.

    Returns:
        json: JSON response containing churn probability.
    """
    data = request.get_json()
    X_scaled = preprocess_data(data)
    prediction = model.predict_proba(X_scaled)[0][1]  # Predict probability of churn (class 1)
    return jsonify({'churn_probability': prediction})

if __name__ == '__main__':
    app.run(debug=True)
